import pandas as pd
import numpy as np
import matplotlib as mlb
import matplotlib.pyplot as plt
import seaborn as sns

#Part-1
df=pd.read_csv(r"D:\Stock Market\Stock_Market_Data.csv")
df.head()
######Calculate basic summary statistics for each column (mean, median, standard deviation, etc.).
summary_stats = df.describe()

######Explore the distribution of the 'Close' prices over time.
plt.figure(figsize=(14,7))
plt.plot(df['Close'])
plt.title('Close Price Over Time')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.show()
#####Identify and analyze any outliers (if any) in the dataset.
z_scores = (df['Close'] - df['Close'].mean()) / df['Close'].std()
outliers = df[abs(z_scores) > 3]

df
#####Part 2
####Create a line chart to visualize the 'Close' prices over time.
df['Close'].plot(title='Stock Prices Over Time')


####Calculate and plot the daily percentage change in closing prices.
df['Daily_Return'] = df['Close'].pct_change() * 100

plt.figure(figsize=(14,7))
plt.plot(df['Daily_Return'])
plt.title('Daily Percentage Change in Closing Price')
plt.xlabel('Date')
plt.ylabel('Percentage Change (%)')
plt.show()



####Investigate the presence of any trends or seasonality in the stock prices.

####Apply moving averages to smooth the time series data in 15/30 day intervals against the original graph.
df['MA_15'] = df['Close'].rolling(window=15).mean()
df['MA_30'] = df['Close'].rolling(window=30).mean()

plt.figure(figsize=(14,7))
plt.plot(df['Close'], label='Original')
plt.plot(df['MA_15'], label='15-Day MA')
plt.plot(df['MA_30'], label='30-Day MA')
plt.title('Close Price with Moving Averages')
plt.xlabel('Date')
plt.ylabel('Close Price')
plt.legend()
plt.show()
########Calculate the average closing price for each stock.
import pandas as pd


average_closing_prices = df.groupby('Name')['Close'].mean().reset_index()

top_5_stocks = average_closing_prices.nlargest(5, 'Close')
bottom_5_stocks = average_closing_prices.nsmallest(5, 'Close')


print("Top 5 stocks based on average closing price:")
print(top_5_stocks)
print("\nBottom 5 stocks based on average closing price:")
print(bottom_5_stocks)


####Identify the top 5 and bottom 5 stocks based on average closing price.
import pandas as pd



average_closing_prices = df.groupby('Name')['Close'].mean()


top_5_stocks = average_closing_prices.sort_values(ascending=False).head(5)


bottom_5_stocks = average_closing_prices.sort_values(ascending=True).head(5)

top_5_stocks, bottom_5_stocks



####Part 3
####Calculate and plot the rolling standard deviation of the 'Close' prices.

df['Rolling_Std'] = df['Close'].rolling(window=30).std()

plt.figure(figsize=(12, 6))
df['Rolling_Std'].plot(title='Rolling Standard Deviation of Close Prices')
plt.xlabel('Date')
plt.ylabel('Rolling Standard Deviation')
plt.show()






####Create a new column for daily price change (Close - Open).
df['Daily_Price_Change'] = df['Close'] - df['Open']
df
####Analyze the distribution of daily price changes.
import pandas as pd
import matplotlib.pyplot as plt

plt.figure(figsize=(10, 6))
plt.hist(df['Daily_Price_Change'], bins=50, alpha=0.75)
plt.title('Distribution of Daily Price Changes')
plt.xlabel('Price Change')
plt.ylabel('Frequency')
plt.grid(True)
plt.show()

####dentify days with the largest price increases and decreases.

largest_increase = df.loc[df['Daily_Price_Change'].idxmax()]


largest_decrease = df.loc[df['Daily_Price_Change'].idxmin()]


print("Day with the largest price increase:")
print(largest_increase)

print("\nDay with the largest price decrease:")
print(largest_decrease)

####Identify stocks with unusually high trading volume on certain days.

mean_volume = df['Volume'].mean()
std_volume = df['Volume'].std()


threshold = mean_volume + 2 * std_volume


unusual_volume_days = df[df['Volume'] > threshold]


print("Days with unusually high trading volume:")
print(unusual_volume_days)



####part 4
#####Explore the relationship between trading volume and volatility.
df['Volatility'] = df['High'] - df['Low']


correlation_volume_volatility = df['Volume'].corr(df['Volatility'])


print(f"Correlation between trading volume and volatility: {correlation_volume_volatility}")
#####Calculate the correlation matrix between the 'Open' & 'High', 'Low' &'Close' prices.


correlation_matrix = df[['Open', 'High', 'Low', 'Close']].corr()


print("Correlation matrix between 'Open', 'High', 'Low', and 'Close':")
print(correlation_matrix)

####Create a heatmap to visualize the correlations using the seaborn package.
sns.set(style="white")
plt.figure(figsize=(8, 6))
heatmap = sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap of Stock Prices')
plt.show()

